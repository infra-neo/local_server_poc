#!/usr/bin/env python3
"""
Script para configurar LDAP Source en Authentik
Sincroniza usuarios desde OpenLDAP
"""

import requests
import json
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class AuthentikLDAPConfigurator:
    def __init__(self):
        self.base_url = "https://34.68.124.46:9443"
        self.session = requests.Session()
        self.session.verify = False
        
        # Configuraci√≥n LDAP desde el an√°lisis anterior
        self.ldap_config = {
            "name": "Neogenesys LDAP",
            "slug": "neogenesys-ldap",
            "server_uri": "ldap://kolaboree-ldap:389",
            "bind_cn": "cn=admin,dc=kolaboree,dc=local",
            "bind_password": "zEYgBeGPqNdqXSUF2IajtezHrjSE8tXgE8dx6ClhWiMiqD35+tMtVZIndUzaMW01",
            "base_dn": "dc=kolaboree,dc=local",
            "additional_user_dn": "ou=users",
            "additional_group_dn": "ou=groups",
            "user_object_filter": "(objectClass=inetOrgPerson)",
            "group_object_filter": "(objectClass=groupOfNames)",
            "group_membership_field": "member",
            "object_uniqueness_field": "uid",
            "sync_users": True,
            "sync_users_password": True,
            "sync_groups": True,
            "sync_parent_group": None
        }
        
    def get_auth_token(self, username, password):
        """Obtener token de autenticaci√≥n"""
        print("üîê Obteniendo token de autenticaci√≥n...")
        
        login_page = self.session.get(f"{self.base_url}/if/flow/default-authentication-flow/")
        
        # Buscar token CSRF
        csrf_token = None
        for line in login_page.text.split('\n'):
            if 'csrfmiddlewaretoken' in line and 'value=' in line:
                csrf_token = line.split('value="')[1].split('"')[0]
                break
        
        if not csrf_token:
            print("‚ùå No se pudo obtener token CSRF")
            return False
            
        # Realizar login
        login_data = {
            'uid_field': username,
            'password': password,
            'csrfmiddlewaretoken': csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/if/flow/default-authentication-flow/",
            data=login_data,
            allow_redirects=False
        )
        
        if response.status_code in [302, 200]:
            print("‚úÖ Autenticaci√≥n exitosa")
            return True
        else:
            print(f"‚ùå Error en autenticaci√≥n: {response.status_code}")
            return False
    
    def check_existing_ldap_sources(self):
        """Verificar fuentes LDAP existentes"""
        print("üîç Verificando fuentes LDAP existentes...")
        
        response = self.session.get(f"{self.base_url}/api/v3/sources/ldap/")
        
        if response.status_code == 200:
            sources = response.json()['results']
            print(f"‚úÖ Encontradas {len(sources)} fuentes LDAP")
            
            for source in sources:
                print(f"  üìÇ {source['name']} (slug: {source['slug']})")
                print(f"     Server: {source['server_uri']}")
                print(f"     Base DN: {source['base_dn']}")
                
            return sources
        else:
            print(f"‚ùå Error obteniendo fuentes LDAP: {response.status_code}")
            return []
    
    def create_ldap_source(self):
        """Crear nueva fuente LDAP"""
        print("üîß Creando fuente LDAP...")
        
        response = self.session.post(
            f"{self.base_url}/api/v3/sources/ldap/",
            json=self.ldap_config,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 201:
            source = response.json()
            print("‚úÖ Fuente LDAP creada exitosamente")
            print(f"  üìÇ Nombre: {source['name']}")
            print(f"  üîó Slug: {source['slug']}")
            print(f"  üåê Server: {source['server_uri']}")
            return source
        else:
            print(f"‚ùå Error creando fuente LDAP: {response.status_code}")
            print(f"Response: {response.text}")
            return None
    
    def sync_ldap_users(self, source_slug):
        """Sincronizar usuarios desde LDAP"""
        print(f"üîÑ Sincronizando usuarios desde LDAP ({source_slug})...")
        
        # Trigger sync
        response = self.session.post(
            f"{self.base_url}/api/v3/sources/ldap/{source_slug}/sync/",
            json={}
        )
        
        if response.status_code in [200, 202]:
            print("‚úÖ Sincronizaci√≥n iniciada")
            return True
        else:
            print(f"‚ùå Error iniciando sincronizaci√≥n: {response.status_code}")
            return False
    
    def check_users(self):
        """Verificar usuarios sincronizados"""
        print("üë• Verificando usuarios sincronizados...")
        
        response = self.session.get(f"{self.base_url}/api/v3/core/users/")
        
        if response.status_code == 200:
            users = response.json()['results']
            print(f"‚úÖ Encontrados {len(users)} usuarios")
            
            ldap_users = [u for u in users if 'ldap' in str(u.get('source', '')).lower()]
            print(f"üìÇ Usuarios LDAP: {len(ldap_users)}")
            
            for user in users:
                source_name = user.get('source_name', 'Local')
                print(f"  üë§ {user['username']} ({user['email']}) - Fuente: {source_name}")
                
            return users
        else:
            print(f"‚ùå Error obteniendo usuarios: {response.status_code}")
            return []
    
    def run_ldap_setup(self):
        """Ejecutar configuraci√≥n completa de LDAP"""
        print("üöÄ Configurando LDAP Source en Authentik")
        print("=" * 50)
        
        # Autenticaci√≥n
        if not self.get_auth_token("akadmin", "Kolaboree2024!Admin"):
            return False
        
        # Verificar fuentes existentes
        existing_sources = self.check_existing_ldap_sources()
        
        # Crear fuente LDAP si no existe
        neogenesys_source = None
        for source in existing_sources:
            if 'neogenesys' in source['name'].lower():
                neogenesys_source = source
                print(f"‚úÖ Fuente LDAP existente encontrada: {source['name']}")
                break
        
        if not neogenesys_source:
            neogenesys_source = self.create_ldap_source()
            if not neogenesys_source:
                return False
        
        # Sincronizar usuarios
        source_slug = neogenesys_source['slug']
        self.sync_ldap_users(source_slug)
        
        # Verificar usuarios
        import time
        print("‚è≥ Esperando sincronizaci√≥n...")
        time.sleep(5)
        self.check_users()
        
        print("\n‚úÖ Configuraci√≥n LDAP completada")
        print("üéØ Pr√≥ximos pasos:")
        print("   1. Verificar sincronizaci√≥n en Authentik Admin")
        print("   2. Configurar Property Mappings si es necesario")
        print("   3. Crear OAuth2 Provider para Guacamole")
        print("   4. Probar flujo completo de autenticaci√≥n")
        
        return True

if __name__ == "__main__":
    print("üîß LDAP Source Configurator - Authentik")
    print("Configurando sincronizaci√≥n con OpenLDAP")
    print("=" * 60)
    
    try:
        configurator = AuthentikLDAPConfigurator()
        success = configurator.run_ldap_setup()
        
        if success:
            print("\n‚úÖ Configuraci√≥n LDAP exitosa")
        else:
            print("\n‚ùå Error en configuraci√≥n LDAP")
            
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()