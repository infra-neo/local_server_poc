version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  redis:
    image: redis:7-alpine
    command: >
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASSWORD}
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING}
    ports:
      - "${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    depends_on:
      - postgres
      - redis

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASSWORD}
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING}
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
      - authentik_certs:/certs
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    depends_on:
      - postgres
      - redis

  guacd:
    image: guacamole/guacd:latest
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  guacamole-client:
    image: guacamole/guacamole:latest
    environment:
      GUACD_HOSTNAME: ${GUACD_HOSTNAME}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_DATABASE: ${GUACAMOLE_DB}
      POSTGRES_USER: ${GUACAMOLE_USER}
      POSTGRES_PASSWORD: ${GUACAMOLE_PASSWORD}
    ports:
      - "${GUACAMOLE_PORT:-8080}:8080"
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    depends_on:
      - guacd
      - postgres

  ziti-controller:
    image: openziti/ziti-controller:latest
    environment:
      ZITI_CTRL_NAME: ${ZITI_CTRL_NAME}
    ports:
      - "${ZITI_PORT_API:-1280}:1280"
      - "${ZITI_PORT_CTRL:-6262}:6262"
    volumes:
      - ziti_data:/persistent
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  portal-web:
    image: nginx:alpine
    ports:
      - "${PORTAL_WEB_PORT:-80}:80"
    volumes:
      - portal_data:/usr/share/nginx/html
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  api-gateway:
    image: node:18-alpine
    command: sh -c "echo 'API Gateway Placeholder' && sleep infinity"
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    networks:
      - stack-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  authentik_media:
    driver: local
  authentik_templates:
    driver: local
  authentik_certs:
    driver: local
  ziti_data:
    driver: local
  portal_data:
    driver: local

networks:
  stack-net:
    driver: overlay
    attachable: true
