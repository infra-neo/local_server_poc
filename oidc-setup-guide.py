#!/usr/bin/env python3
"""
Gu√≠a paso a paso para configurar OIDC Provider en Authentik manualmente
"""

def show_manual_configuration():
    print("üîê GU√çA PASO A PASO: CONFIGURAR OIDC PROVIDER EN AUTHENTIK")
    print("="*65)
    
    print("\nüìã INFORMACI√ìN NECESARIA:")
    print("‚ñ∂Ô∏è Authentik Admin: https://34.68.124.46:9443/if/admin/")
    print("‚ñ∂Ô∏è Usuario: akadmin")
    print("‚ñ∂Ô∏è Contrase√±a: Kolaboree2024!Admin")
    
    print("\nüîß PASO 1: CREAR OAUTH2/OPENID PROVIDER")
    print("-" * 45)
    print("1. Acceder a: https://34.68.124.46:9443/if/admin/")
    print("2. Login con: akadmin / Kolaboree2024!Admin")
    print("3. En el men√∫ lateral, ir a: Applications > Providers")
    print("4. Hacer clic en: [Create] (bot√≥n azul)")
    print("5. Seleccionar: OAuth2/OpenID Provider")
    print("6. Configurar estos campos EXACTOS:")
    print()
    print("   üìù DATOS DEL PROVIDER:")
    print("   ‚îú‚îÄ‚îÄ Name: Guacamole OIDC Provider")
    print("   ‚îú‚îÄ‚îÄ Authorization flow: default-provider-authorization-explicit-consent (o similar)")
    print("   ‚îú‚îÄ‚îÄ Client type: Confidential")
    print("   ‚îú‚îÄ‚îÄ Client ID: guacamole-rac-client")
    print("   ‚îú‚îÄ‚îÄ Client Secret: guacamole-rac-secret-2024")
    print("   ‚îú‚îÄ‚îÄ Redirect URIs/Origins (IMPORTANTE):")
    print("   ‚îÇ   https://34.68.124.46:8080/guacamole/")
    print("   ‚îÇ   https://34.68.124.46:8080/guacamole")
    print("   ‚îú‚îÄ‚îÄ Signing Key: (dejar por defecto)")
    print("   ‚îú‚îÄ‚îÄ Advanced protocol settings:")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ Scopes: openid profile email")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ Subject mode: Based on the User's ID")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ Include claims in id_token: ‚úÖ ACTIVADO")
    print("   ‚îÇ   ‚îî‚îÄ‚îÄ Issuer mode: Each provider has a different issuer")
    print("   ‚îî‚îÄ‚îÄ Machine-to-machine authentication: (desactivado)")
    print()
    print("7. Hacer clic en: [Create]")
    
    print("\nüîó PASO 2: CREAR APPLICATION")
    print("-" * 35)
    print("1. En el men√∫ lateral, ir a: Applications > Applications")
    print("2. Hacer clic en: [Create] (bot√≥n azul)")
    print("3. Configurar estos campos:")
    print()
    print("   üìù DATOS DE LA APPLICATION:")
    print("   ‚îú‚îÄ‚îÄ Name: Apache Guacamole")
    print("   ‚îú‚îÄ‚îÄ Slug: guacamole")
    print("   ‚îú‚îÄ‚îÄ Provider: Guacamole OIDC Provider (seleccionar el creado arriba)")
    print("   ‚îú‚îÄ‚îÄ Launch URL: https://34.68.124.46:8080/guacamole/")
    print("   ‚îú‚îÄ‚îÄ Open in new tab: ‚ùå NO")
    print("   ‚îú‚îÄ‚îÄ Icon: (opcional - puede subir logo de Guacamole)")
    print("   ‚îú‚îÄ‚îÄ Publisher: Kolaboree")
    print("   ‚îú‚îÄ‚îÄ Description: Remote Desktop Gateway")
    print("   ‚îî‚îÄ‚îÄ Policy engine mode: ANY")
    print()
    print("4. Hacer clic en: [Create]")
    
    print("\n‚úÖ PASO 3: VERIFICACI√ìN")
    print("-" * 25)
    print("1. En Applications > Providers, deber√≠a aparecer:")
    print("   ‚ñ∂Ô∏è Guacamole OIDC Provider (OAuth2/OpenID Provider)")
    print()
    print("2. En Applications > Applications, deber√≠a aparecer:")
    print("   ‚ñ∂Ô∏è Apache Guacamole (con slug: guacamole)")
    print()
    print("3. Hacer clic en la aplicaci√≥n 'Apache Guacamole'")
    print("4. Verificar que en la pesta√±a 'Provider Info' aparezcan los endpoints:")
    print("   ‚îú‚îÄ‚îÄ Authorization URL: https://34.68.124.46:9443/application/o/authorize/")
    print("   ‚îú‚îÄ‚îÄ Token URL: https://34.68.124.46:9443/application/o/token/")
    print("   ‚îú‚îÄ‚îÄ Userinfo URL: https://34.68.124.46:9443/application/o/userinfo/")
    print("   ‚îú‚îÄ‚îÄ Logout URL: https://34.68.124.46:9443/application/o/guacamole/end-session/")
    print("   ‚îî‚îÄ‚îÄ JWKS URL: https://34.68.124.46:9443/application/o/guacamole/jwks/")
    
    print("\nüöÄ PASO 4: PROBAR LA INTEGRACI√ìN")
    print("-" * 35)
    print("1. Acceder a Guacamole: https://34.68.124.46:8080/guacamole/")
    print("2. Deber√≠a aparecer:")
    print("   ‚ñ∂Ô∏è Bot√≥n 'Login with OIDC' o")
    print("   ‚ñ∂Ô∏è Redirect autom√°tico a Authentik")
    print("3. Login en Authentik con cualquier usuario creado")
    print("4. Deber√≠a redirigir de vuelta a Guacamole autenticado")
    
    print("\nüîß CONFIGURACI√ìN ACTUAL DE GUACAMOLE:")
    print("-" * 45)
    print("‚úÖ docker-compose.yml ya configurado con:")
    print("‚îú‚îÄ‚îÄ OPENID_AUTHORIZATION_ENDPOINT: https://34.68.124.46:9443/application/o/authorize/")
    print("‚îú‚îÄ‚îÄ OPENID_JWKS_ENDPOINT: https://34.68.124.46:9443/application/o/guacamole/jwks/")
    print("‚îú‚îÄ‚îÄ OPENID_ISSUER: https://34.68.124.46:9443/application/o/guacamole/")
    print("‚îú‚îÄ‚îÄ OPENID_CLIENT_ID: guacamole-rac-client")
    print("‚îú‚îÄ‚îÄ OPENID_REDIRECT_URI: https://34.68.124.46:8080/guacamole/")
    print("‚îú‚îÄ‚îÄ OPENID_USERNAME_CLAIM_TYPE: preferred_username")
    print("‚îú‚îÄ‚îÄ OPENID_ENABLED: true")
    print("‚îî‚îÄ‚îÄ EXTENSION_PRIORITY: *,openid")
    
    print("\n‚ö†Ô∏è  SOLUCI√ìN DE PROBLEMAS:")
    print("-" * 30)
    print("‚ùå Si no aparece el bot√≥n OIDC:")
    print("   1. Verificar que el provider est√© configurado correctamente")
    print("   2. Revisar logs de Guacamole: docker-compose logs guacamole")
    print("   3. Verificar que las URLs en docker-compose.yml coincidan con Authentik")
    print()
    print("‚ùå Si hay error de redirect_uri:")
    print("   1. Verificar que las URLs en Authentik Redirect URIs incluyan:")
    print("      - https://34.68.124.46:8080/guacamole/")
    print("      - https://34.68.124.46:8080/guacamole")
    print()
    print("‚ùå Si hay errores SSL:")
    print("   1. Verificar que todas las URLs usen https://")
    print("   2. Verificar certificados SSL de Authentik")
    
    print("\nüéØ DESPU√âS DE LA CONFIGURACI√ìN:")
    print("-" * 35)
    print("1. Los usuarios podr√°n acceder a Guacamole directamente desde:")
    print("   ‚ñ∂Ô∏è https://34.68.124.46:8080/guacamole/ (con OIDC)")
    print("   ‚ñ∂Ô∏è El launcher de Authentik en https://34.68.124.46:9443/")
    print()
    print("2. SSO funcionar√° autom√°ticamente entre Authentik y Guacamole")
    print()
    print("3. Los usuarios solo necesitar√°n hacer login una vez en Authentik")

def check_current_status():
    print("\nüìä ESTADO ACTUAL DEL SISTEMA:")
    print("-" * 35)
    
    import subprocess
    import json
    
    try:
        # Verificar estado de contenedores
        result = subprocess.run(
            ['docker-compose', 'ps', '--format', 'json'],
            capture_output=True,
            text=True,
            cwd='/home/infra/local_server_poc'
        )
        
        if result.returncode == 0:
            containers = result.stdout.strip().split('\n')
            for container_line in containers:
                if container_line.strip():
                    container = json.loads(container_line)
                    name = container.get('Name', 'Unknown')
                    state = container.get('State', 'Unknown')
                    health = container.get('Health', 'N/A')
                    
                    if 'guacamole' in name.lower() or 'authentik' in name.lower():
                        status_icon = "‚úÖ" if state == "running" else "‚ùå"
                        print(f"{status_icon} {name}: {state} (Health: {health})")
        
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo verificar el estado de los contenedores: {e}")
    
    print("\nüîó URLs DE ACCESO:")
    print("‚îú‚îÄ‚îÄ Authentik Admin: https://34.68.124.46:9443/if/admin/")
    print("‚îú‚îÄ‚îÄ Authentik User: https://34.68.124.46:9443/")
    print("‚îî‚îÄ‚îÄ Guacamole: https://34.68.124.46:8080/guacamole/")

if __name__ == "__main__":
    show_manual_configuration()
    check_current_status()
    
    print("\n" + "="*65)
    print("üí° RESUMEN: El archivo docker-compose.yml ya est√° configurado.")
    print("   Solo falta crear el Provider y Application en Authentik UI.")
    print("="*65)